# -*- coding: utf-8 -*-
"""customer-segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19oIbYAaoiZ0ip7dfstY3c33VkNeFThqF
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import datetime as dt

data = pd.read_csv("Dataset_ecommerce.csv")

data.head(5)

data.describe(include = 'all')

data.isnull()

data.isnull().sum()

data.dropna(inplace = True)

data.info()

data["InvoiceDate"] = pd.to_datetime(data["InvoiceDate"])

"""**EXPLORATORY DATA ANALYSIS**"""

#Analysis by Country

quantity_by_country = data.groupby(["Country"])["Quantity"].sum().reset_index()

quantity_by_country = quantity_by_country.sort_values("Quantity", ascending = False).reset_index()

quantity_by_country.head(5)

#visualise top 10 countries where most products are sold

top_10_country = quantity_by_country.head(10)

plt.figure(figsize = (15,8))
ax = sns.barplot(x = "Country", y = "Quantity", data = top_10_country, palette="Set2")


plt.xlabel("Countries")
plt.ylabel("Quantity of Product Sold")
plt.title("Bar Chart of top 10 countries with highest purchase")
plt.show()

lowest_10_country = quantity_by_country.tail(10)

plt.figure(figsize = (15,8))
ax = sns.barplot(x = "Country", y = "Quantity", data = lowest_10_country, palette="Set2")


plt.xlabel("Countries")
plt.ylabel("Quantity of Product Sold")
plt.title("Bar Chart of last 10 countries with lowest purchase")
plt.show()

#Countries with most number of customers
#Analysis of countries and number of customers

country_to_customer = data.groupby(["Country"])["CustomerID"].nunique().reset_index()

country_to_customer = country_to_customer.sort_values("CustomerID", ascending = False).reset_index()

country_to_customer.head(5)

#Draw a plot of the top 10 countries with the most number of customers

top_countries_to_customer = country_to_customer.head(10)

plt.figure(figsize = (20,8))
sns.barplot(x = "Country", y = "CustomerID", data = top_countries_to_customer, palette="Set1")

plt.xlabel("Countries")
plt.ylabel("Total number of customers")
plt.title("Bar chart of top 10 countries with most number of customers")
plt.show()

#Sales Trend Visualisation

monthly_sales = data.groupby(data["InvoiceDate"].dt.to_period("M"))["Quantity"].sum()

monthly_sales

# Create a line Plot

plt.figure(figsize = (20,10))
plt.plot(monthly_sales.index.strftime("%y-%m"), monthly_sales.values, marker = "o", linestyle = "-")
plt.xlabel("month")
plt.ylabel("total sales")
plt.title("monthly sales trend")
plt.grid(True)
plt.show()

"""**Cohort Analysis**"""

data.head()

def get_month(x):
  return dt.datetime(x.year, x.month, 1)

data["InvoiceDate"] = data["InvoiceDate"].apply(get_month)

data.head()

def get_cohort_date(data):
  data["cohort date"] = data.groupby("CustomerID")["InvoiceDate"].transform("min")
  return data["cohort date"]

data["cohort date"] = get_cohort_date(data)

data

"""**Cohort Index**"""

def get_year_and_month(data, col):

  month = data[col].dt.month
  year = data[col].dt.year
  return month, year

first_month, first_year = get_year_and_month(data, "cohort date")

first_month

first_year

latest_month, latest_year = get_year_and_month(data, "InvoiceDate")

latest_month

latest_year

# Cohort Index

def create_cohort_index(first_month, first_year, latest_month, latest_year):
  year_diff = latest_year - first_year
  month_diff = latest_month - first_month
  index = year_diff*12 + month_diff + 1
  return index

data["cohort_index"] = create_cohort_index(first_month, first_year, latest_month, latest_year)

data

"""**Cohort Table**"""

cohort_info = data.groupby(["cohort date", 'cohort_index'])["CustomerID"].nunique().reset_index()

cohort_info.rename(columns = {"CustomerID" : "Number of customers"}, inplace = True)

cohort_info

cohort_table = cohort_info.pivot(index = "cohort date", columns = ["cohort_index"], values = "Number of customers")
cohort_table.index = cohort_table.index.strftime("%B %Y")

cohort_table

plt.figure(figsize = (20,10))
sns.heatmap(cohort_table, annot = True, cmap = "Dark2_r", fmt = ".2f")

new_cohort_table = cohort_table.divide(cohort_table.iloc[:,0], axis = 0)

new_cohort_table

plt.figure(figsize = (20,10))
sns.heatmap(new_cohort_table, annot = True, cmap = "Dark2_r", fmt = ".0%")

"""**Quantity Bought**"""

quantity_bought = data.groupby(["cohort date", "cohort_index"])["Quantity"].mean().reset_index()

quantity_bought

quantity_table = quantity_bought.pivot(index = "cohort date", columns = ["cohort_index"], values = "Quantity")
quantity_table.index = quantity_table.index.strftime("%B %Y")

quantity_table

plt.figure(figsize = (20,10))
sns.heatmap(quantity_table, annot = True, cmap = "Dark2_r", fmt = ".3f")

"""**Aggregate Data by Customer**"""

#Create a new column for total price of each transaction
data['TotalPrice'] = data['Quantity'] * data['UnitPrice']

#Aggregate at the customer level
customer_df = data.groupby('CustomerID').agg({'Quantity': 'sum', 'TotalPrice': 'sum', 'InvoiceNo': 'nunique'}).reset_index()

#Rename columns for clarity
customer_df.rename(columns={'Quantity': 'TotalQuantity', 'TotalPrice': 'TotalSpent', 'InvoiceNo': 'TotalInvoices'}, inplace=True)

customer_df.head()

from sklearn.preprocessing import StandardScaler

# Pick the columns for clustering
features = ['TotalQuantity', 'TotalInvoices', 'TotalSpent']
X = customer_df[features].values

# Scale the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("Shape of the scaled data:", X_scaled.shape)

from sklearn.cluster import KMeans

wcss = []
K_range = range(3, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the WCSS vs K
plt.figure(figsize=(10, 6))
plt.plot(K_range, wcss, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of clusters (k)')
plt.ylabel('WCSS')
plt.xticks(K_range)
plt.show()

k = 5
kmeans = KMeans(n_clusters=k, init='k-means++', random_state=42)
kmeans.fit(X_scaled)

# Retrieve cluster labels
labels = kmeans.labels_

# Attach labels back to the original customer dataframe
customer_df['Cluster'] = labels

customer_df.head()

cluster_profiles = customer_df.groupby('Cluster').agg({'TotalQuantity': 'mean', 'TotalSpent': 'mean', 'TotalInvoices': 'mean', 'CustomerID': 'count'}).rename(columns={'CustomerID': 'NumCustomers'})

cluster_profiles

from sklearn.decomposition import PCA

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Plot the 2D PCA, color by cluster label
plt.figure(figsize=(10, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=labels, cmap='rainbow')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('K-Means Clusters (PCA-reduced)')
plt.colorbar(label='Cluster')
plt.show()